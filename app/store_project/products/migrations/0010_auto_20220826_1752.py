# Generated by Django 3.2.11 on 2022-08-26 17:52

from django.db import migrations, models
import django.db.models.deletion
import django_lifecycle.mixins
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('products', '0009_subscription_billing_interval'),
    ]

    operations = [
        migrations.CreateModel(
            name='Price',
            fields=[
                ('active', models.BooleanField(default=True)),
                ('currency', models.CharField(choices=[('USD', 'Usd')], default='USD', max_length=3)),
                ('metadata', models.JSONField(blank=True)),
                ('nickname', models.CharField(blank=True, help_text='A brief description of the price, hidden from customers', max_length=200)),
                ('aggregate_usage', models.CharField(choices=[('sum', 'All usage during period'), ('last_during_period', 'Last usage record reported within a period'), ('last_ever', 'Last usage record ever (across period bounds)'), ('max', 'Maximum reported usage during a period')], default=None, help_text='Specifices a usage aggregation strategy for prices of `usage_type=metered`', max_length=18, null=True)),
                ('interval', models.CharField(choices=[('once', 'Once'), ('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default=None, max_length=5, null=True)),
                ('interval_count', models.PositiveSmallIntegerField(default=None, help_text='The number of intervals between subscription billings, e.g., `interval=month` and `interval_count=3` bills every 3 months', null=True)),
                ('usage_type', models.CharField(choices=[('metered', '`metered`: aggregates the total usage based on usage records'), ('licensed', '`licensed`: automatically bills the `quantity` set when adding it to a subscription (default)')], default=None, max_length=8, null=True)),
                ('price_type', models.CharField(choices=[('one_time', 'One Time'), ('recurring', 'Recurring')], default='one_time', max_length=9)),
                ('unit_amount', models.PositiveIntegerField(default=None, help_text='Amount in cents; only set if `billing_scheme=per_unit`', null=True)),
                ('billing_scheme', models.CharField(choices=[('tiered', '`tiered`: unit pricing will be computed using a tiered strategy defined with `tiers` and `tiers_mode`'), ('per_unit', '`per_unit`: the fixed amount will be charged per unit in `quantity` (for prices with `usage_type=licensed`) or per unit of total usage (for prices with `usage_type=metered`)')], default='per_unit', help_text='How to compute the price per period', max_length=8)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('tax_behavior', models.CharField(choices=[('inclusive', 'The price includes tax payment'), ('exclusive', 'The price does not include tax payment'), ('unspecified', 'Tax behavior not specified')], default='unspecified', max_length=11)),
                ('tiers_mode', models.CharField(choices=[('graduated', '`graduated`: pricing changes as the quantity grows'), ('volume', '`volume`: the maximum quantity within a period determines the per unit price')], default=None, max_length=9, null=True)),
                ('object_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='subscription',
            name='billing_interval',
        ),
        migrations.CreateModel(
            name='Tier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_type', models.CharField(choices=[('flat_amount', 'flat_amount: price for the entire tier'), ('unit_amount', 'unit_amount: per unit price for units relevant to the tier')], max_length=19)),
                ('amount', models.PositiveIntegerField()),
                ('up_to', models.PositiveIntegerField()),
                ('price_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='products.price')),
            ],
        ),
        migrations.AddIndex(
            model_name='price',
            index=models.Index(fields=['content_type', 'object_id'], name='products_pr_content_cc428b_idx'),
        ),
        migrations.AddConstraint(
            model_name='price',
            constraint=models.CheckConstraint(check=models.Q(('aggregate_usage__isnull', False), ('usage_type', 'metered')), name='products_price_aggregate_usage_is_metered'),
        ),
        migrations.AddConstraint(
            model_name='price',
            constraint=models.CheckConstraint(check=models.Q(('billing_scheme', 'tiered'), ('unit_amount__isnull', True)), name='products_price_tiered_billing_without_unit_amount'),
        ),
        migrations.AddConstraint(
            model_name='price',
            constraint=models.CheckConstraint(check=models.Q(('billing_scheme', 'per_unit'), ('unit_amount__isnull', False)), name='products_price_unit_billing_has_unit_amount'),
        ),
        migrations.AddConstraint(
            model_name='price',
            constraint=models.CheckConstraint(check=models.Q(('billing_scheme', 'per_unit'), ('tiers_mode__isnull', True)), name='products_price_unit_billing_is_not_tiered'),
        ),
        migrations.AddConstraint(
            model_name='price',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('interval', 'year'), ('interval_count__lte', 1)), models.Q(('interval', 'month'), ('interval_count__lte', 12)), models.Q(('interval', 'week'), ('interval_count__lte', 52)), models.Q(('interval', 'day'), ('interval_count__lte', 365)), _connector='OR'), name='products_price_recurring_interval_one_year_or_less'),
        ),
    ]
